{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","name","setName","setUserName","followers","setFollowers","following","setFollowing","repos","setRepos","avatar","setAvatar","userInput","setUserInput","error","setError","useEffect","fetch","then","res","json","data","setData","login","public_repos","avatar_url","className","Form","onSubmit","message","Group","Input","placeholder","onChange","e","target","value","Button","content","Card","Image","src","wrapped","ui","Content","Header","extra","Icon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,uKC0G5BC,MArGf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAEIG,GAFJ,aAGqBH,mBAAS,IAH9B,mBAGNI,EAHM,KAGKC,EAHL,OAIqBL,mBAAS,IAJ9B,mBAINM,EAJM,KAIKC,EAJL,OAKaP,mBAAS,IALtB,mBAKNQ,EALM,KAKCC,EALD,OAMeT,mBAAS,IANxB,mBAMNU,EANM,KAMEC,EANF,OAOoBX,mBAAS,IAP7B,mBAONY,EAPM,KAOKC,EAPL,OAQab,mBAAS,IARtB,mBAQNc,EARM,KAQCC,EARD,KAWbC,qBAAU,WACRC,MAAM,wCACNC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACdF,MAAM,SAAAG,GACLC,EAAQD,QAET,IAEL,IAAMC,EAAU,SAAC,GAKG,IALFrB,EAKC,EALDA,KACfsB,EAIgB,EAJhBA,MACAnB,EAGgB,EAHhBA,UACAE,EAEgB,EAFhBA,UACAkB,EACgB,EADhBA,aACAC,EAAgB,EAAhBA,WACCvB,EAAQD,GACRE,EAAYoB,GACZlB,EAAaD,GACbG,EAAaD,GACbG,EAASe,GACTb,EAAUc,IAsBb,OACE,6BACE,yBAAKC,UAAU,UAAf,6BAGA,yBAAKA,UAAY,UAChB,kBAACC,EAAA,EAAD,CAAMC,SApBS,WACnBX,MAAM,gCAAD,OAAiCL,IACrCM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GACzBA,EAAKQ,QACNd,EAASM,EAAKQ,UAGdP,EAAQD,GACRN,EAAS,YAaP,kBAACY,EAAA,EAAKG,MAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,CAAYC,YAAY,cAAc/B,KAAK,cAAcgC,SA1B9C,SAACC,GACpBrB,EAAaqB,EAAEC,OAAOC,UA0Bd,kBAACT,EAAA,EAAKU,OAAN,CAAaC,QAAQ,cAIzBxB,EAAS,wBAAIY,UAAU,gBAAd,QAAmCZ,GAAgB,yBAAKY,UAAU,YAC1E,kBAACa,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAOC,IAAK/B,EAAQgC,SAAO,EAACC,IAAI,IAChC,kBAACJ,EAAA,EAAKK,QAAN,KACG,kBAACL,EAAA,EAAKM,OAAN,cAAoB5C,IAGvB,kBAACsC,EAAA,EAAKK,QAAN,CAAcE,OAAK,GACnB,2BACE,kBAACC,EAAA,EAAD,CAAM9C,KAAK,SACVG,EAFH,eAKF,kBAACmC,EAAA,EAAKK,QAAN,CAAcE,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAM9C,KAAK,SACVO,EAFH,WAKF,kBAAC+B,EAAA,EAAKK,QAAN,CAAcE,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAM9C,KAAK,SACTK,EAFJ,mBC9EY0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLkD,QAAQlD,MAAMA,EAAMe,c","file":"static/js/main.4e31eb25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Form, Image, Card, Icon} from 'semantic-ui-react';\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [userName, setUserName] = useState('');\n  const [followers, setFollowers] = useState('');\n  const [following, setFollowing] = useState('');\n  const [repos, setRepos] = useState('');\n  const [avatar, setAvatar] = useState('');\n  const [userInput, setUserInput] =useState('');\n  const [error, setError] = useState('');\n  \n  //to make the function of fetching once when component mounts\n  useEffect(()=>{\n    fetch(\"https://api.github.com/users/example\").\n    then(res =>res.json())\n    .then (data =>{\n      setData(data);\n    });\n  }, []);\n\nconst setData = ({name, \n   login,\n   followers, \n   following,\n   public_repos,\n   avatar_url}) => {\n    setName(name);\n    setUserName(login);\n    setFollowers(followers);\n    setFollowing(following);\n    setRepos(public_repos);\n    setAvatar(avatar_url);\n\n};\n\nconst handleSearch = (e) =>{\n  setUserInput(e.target.value)\n};\n\nconst handleSubmit = () => {\n  fetch(`https://api.github.com/users/${userInput}`)\n  .then(res => res.json()).then(data => {\n    if(data.message){\n      setError(data.message)\n    }\n    else{\n      setData(data);\n      setError(null);\n    }\n    \n  })\n};\n\n return(\n   <div>\n     <div className=\"navbar\">\n       Github Search Reactjs App\n     </div>\n     <div className = \"search\">\n      <Form onSubmit={handleSubmit}>\n        <Form.Group>\n          <Form.Input placeholder='Github User' name='github name' onChange={handleSearch}/>\n          <Form.Button content='Search'/>\n        </Form.Group>\n      </Form>\n     </div>\n     {error ? (<h1 className=\"errormessage\">User {error}</h1>) : (<div className=\"cardArea\">\n       <Card>\n        <Image src={avatar} wrapped ui={false} />\n        <Card.Content>\n           <Card.Header>Name: {name}</Card.Header>\n          {/* <Card.Header>UserName: {userName}</Card.Header>*/}\n        </Card.Content>\n        <Card.Content extra>\n        <a>\n          <Icon name='user' />\n          {followers} followers\n        </a>\n      </Card.Content>\n      <Card.Content extra>\n        <a>\n          <Icon name='user' />\n          {repos} Repos\n        </a>\n      </Card.Content>\n      <Card.Content extra>\n        <a>\n          <Icon name='user' />\n           {following} following\n        </a>\n      </Card.Content>\n    </Card>\n    </div>\n    )\n    }\n     \n     \n   </div>\n );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}